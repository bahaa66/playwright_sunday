# Values used with the cogynt helm template to generate
# a replicated.yaml config file for a release.  Be sure to
# update the image tag below for the proper version of all
# Cogynt images used in the release
replicaCount: 1

dockercfg:
  enabled: false

image:
  repository: 478685488679.dkr.ecr.us-west-2.amazonaws.com/dst-cogynt-workstation-ingest
  tag: v1.2.2
  pullPolicy: IfNotPresent
  pullSecrets:
    - "ecruswest2registry"

secrets:
  example:
    enabled: false
    # env:
    #   ENV_NAME: "ENV_VALUE"
      
# Inline environment
env:
  ENV: prod
  CHECK_LICENSE: true
  POSTGRESQL_HOST: "cogynt-dst-cogynt-otp-postgresql"
  POSTGRESQL_USERNAME: "cogynt-cogynt-user"
  POSTGRESQL_DATABASE: "cogynt_repo"
  ELASTIC_USERNAME: "elastic-user"
  ELASTIC_URL: "cogynt-elasticsearch-master:9200"
  KAFKA_BROKER: "cogynt-cp-kafka"
  KAFKA_PORT: "9092"
  COGYNT_OTP_SERVICE_NAME: "cogynt-dst-cogynt-otp"
  COGYNT_OTP_SERVICE_PORT: 4000
  TLS_KEY_PATH: "/opt/cogility/certs/server.key"
  TLS_CERT_PATH: "/opt/cogility/certs/server.cert"
  HTTP_PORT: 4000
  HTTPS_PORT: 8443
  LOG_LEVEL: debug

  # COGYNT_HOST: http://cogynt-dst-cogynt-worksation-ingest.{{ .Release.namespace }}

envValueFrom:
  - name: POSTGRESQL_PASSWORD
    valueFrom:
      secretKeyRef:
        name: cogynt-postgresql-password
        key: postgresql-password
  - name: COGYNT_SECRET_KEY_BASE
    valueFrom:
      secretKeyRef:
        name: cogynt-auth
        key: secret-key-base
  - name: COGYNT_DOMAIN
    valueFrom:
      secretKeyRef:
        name: cogynt-hosts
        key: caws-host
  #- name: KAFKA_BROKER
  #  valueFrom:
  #    secretKeyRef:
  #      name: cogynt-hosts
  #      key: kafka-host
  - name: ELASTIC_PASSWORD
    valueFrom:
      secretKeyRef:
        name: cogynt-elasticsearch-password
        key: elasticsearch-password


deployment:
  enabled: false

service:
  enabled: true
  type: ClusterIP
  ports:
    https:
      internal: 8443
      external: 443
    http:
      internal: 4000
      external: 4000
  labels:
    part-of: "cogynt-dst"
  annotations:
    contour.heptio.com/upstream-protocol.tls: "443,https"

probes:
  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 15
    httpGet:
      path: /healthz
      scheme: HTTPS
      port: https
  readinessProbe:
    initialDelaySeconds: 0
    periodSeconds: 15
    httpGet:
      path: /healthz
      scheme: HTTPS
      port: https

# resources:
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 80m
#    memory: 64Mi

# Ingress for load balancer
ingress:
  https:
    enabled: true
    port: https
    labels:
      part-of: "cogynt-dst"
    annotations:
      kubernetes.io/ingress.class: "contour"
      projectcontour.io/ingress.class: "contour"
      ingress.kubernetes.io/force-ssl-redirect: "false"
      kubernetes.io/ingress.allow-http: "true"
      contour.heptio.com/tls-minimum-protocol-version: "TLSv1_2"
    host: '{{repl (LicenseFieldValue "sd-caws")}}.{{repl (ConfigOption "hostname")}}'
    paths:
      - /api/drilldown
    tls:
    - secretName: cogynt-global-files-tls
      hosts:
      - '{{repl (LicenseFieldValue "sd-caws")}}.{{repl (ConfigOption "hostname")}}'

initContainers:
  set-cert-ownership:
    enabled: true
    image: docker.io/busybox:1.31.1
    securityContext:
      runAsUser: 0
    command: 
      - sh
      - -c
      - cp /opt/root-certs/* /opt/cogility/certs && chown -R 1000:1000 /opt/cogility/certs
      
    volumeMounts:
    - name: cogynt-dst-cogynt-worksation-ingest-tls
      mountPath: /opt/cogility/certs
    - name: cogynt-dst-cogynt-worksation-ingest-uploaded-tls
      mountPath: /opt/root-certs

statefulset:
  enabled: true
  ## Pods replace strategy
  ## ref: https://v1-10.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#statefulsetupdatestrategy-v1-apps
  strategy: {"type":"RollingUpdate"}
  revisionHistoryLimit: 10
  # annotations:
  #   name: value
  labels:
    part-of: "cogynt-dst"
  pod:
    securityContext:
      fsGroup: 1000
    annotations: {}
    labels:
      part-of: "cogynt-dst"
    # command:
    # args:
  containers:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
  ## Configure volumeClaimTemplate block
  persistence:
    useVolumeClaimTemplates: true
    accessMode: ReadWriteOnce
    size: 4Gi
    mountPath: /blah
    storageClass: default
    labels:
      part-of: "cogynt-dst"
  volumeMounts:
  - name: cogynt-dst-cogynt-worksation-ingest-tls
    mountPath: /opt/cogility/certs
    readOnly: true
  volumes:
  - name: cogynt-dst-cogynt-worksation-ingest-uploaded-tls
    secret:
      secretName: cogynt-global-files-tls
      items:
      - key: tls.crt
        path: server.cert
        mode: 0400
      - key: tls.key
        path: server.key
        mode: 0400
  - name: cogynt-dst-cogynt-worksation-ingest-tls
    emptyDir:
      sizeLimit: "25k"


